"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import os
from pathlib import Path
import logging
import datetime
from decouple import config
from azure.storage.blob import BlobServiceClient


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config("SECRET_KEY")
CRYPT_KEY = "cWcRzV1w-FcIqBfMiSuXFnFZ59VptVcibcRMU_kw220=".encode()

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]
CORS_ORIGIN_ALLOW_ALL = True

CSRF_TRUSTED_ORIGINS = [
    config("SERVER_HOST"),
    config("UI_HOST")
]

Exception_message = "Oops! Our creative server seems to be taking a coffee break â˜•. We'll have it back up and running in no time"



# Logger settings
logger = logging.getLogger(__name__)
syslog = logging.StreamHandler()
formatter = logging.Formatter(
    "INFO => AT: %(asctime)s API/FUNC: %(app_name)s MSG: %(message)s"
)
syslog.setFormatter(formatter)
logger.addHandler(syslog)

logging.basicConfig(filename="app.log")
logger.setLevel(logging.DEBUG)

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Project apps
    "accounts",
    "candidate",
    "employer",
    "Admin_flow",
    # third_party_apps
    "rest_framework",
    'corsheaders',
    "django_filters",
    "drf_yasg"
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django_user_agents.middleware.UserAgentMiddleware'
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'
ASGI_APPLICATION = 'core.asgi.application'


# ML model host
ML_HOST = config("ML_HOST")

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': config('DB_NAME'),
        'USER': config('DB_USERNAME'),
        'PASSWORD': config('DB_PASSWORD'),
        'HOST':config('DB_HOST'),
        'PORT':config('DB_PORT'),
    }
}


# SMTP and Default Mail Configurations
SMTP_SERVER = config("EMAIL_HOST")
SMTP_PORT = config("EMAIL_PORT")  # For starttls
SMTP_SENDER_EMAIL = config("EMAIL_SENDER")
SMTP_PASSWORD = config("EMAIL_PASSWORD")
SMTP_CONNECTION = config("EMAIL_CONNECTION")

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# rest_framework settings
REST_FRAMEWORK = {
    "DEFAULT_PERMISSION_CLASSES": ("rest_framework.permissions.AllowAny",),
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_jwt.authentication.JSONWebTokenAuthentication",
    ),
    "DEFAULT_PARSER_CLASSES": (
        "rest_framework.parsers.JSONParser",
        "rest_framework.parsers.MultiPartParser",
        "rest_framework.parsers.FormParser",
    ),
    # "DEFAULT_RENDERER_CLASSES": ("rest_framework.renderers.JSONRenderer",),
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.LimitOffsetPagination",
    "PAGE_SIZE": 15,
}


# JWT settings
JWT_AUTH = {
    "JWT_ENCODE_HANDLER": "rest_framework_jwt.utils.jwt_encode_payload",
    "JWT_DECODE_HANDLER": "rest_framework_jwt.utils.jwt_decode_token",
    "JWT_PAYLOAD_HANDLER"
    :
    "rest_framework_jwt.utils.jwt_create_payload",
    "JWT_PAYLOAD_GET_USERNAME_HANDLER"
    :
    "rest_framework_jwt.utils.jwt_get_username_from_payload_handler",
    "JWT_PAYLOAD_GET_USER_ID_HANDLER"
    :
    "rest_framework_jwt.utils.jwt_get_user_id_from_payload_handler",
    "JWT_RESPONSE_PAYLOAD_HANDLER"
    :
    "core.utils.jwt_settings.jwt_response_payload_handler",
    "JWT_SECRET_KEY": SECRET_KEY,
    "JWT_GET_USER_SECRET_KEY": None,
    "JWT_PUBLIC_KEY": None,
    "JWT_PRIVATE_KEY": None,
    "JWT_ALGORITHM": "HS256",
    "JWT_VERIFY": True,
    "JWT_VERIFY_EXPIRATION": True,
    "JWT_LEEWAY": 0,
    "JWT_EXPIRATION_DELTA": datetime.timedelta(days=30),
    "JWT_AUDIENCE": None,
    "JWT_ISSUER": None,
    "BLACKLIST_AFTER_ROTATION": True,
    "JWT_ALLOW_REFRESH": False,
    "JWT_REFRESH_EXPIRATION_DELTA": datetime.timedelta(days=30),
    "JWT_AUTH_HEADER_PREFIX": "Bearer",
    "JWT_AUTH_COOKIE": None,
}

AUTH_USER_MODEL = "accounts.AccountsUserModel"

# Azure setup
AZURE_CONNECTION_STRING = config("AZURE_CONNECTION_STRING")
AZURE_CONTAINER_NAME = config("AZURE_CONTAINER_NAME")
AZURE_URL = config("AZURE_URL")

SERVICE_CLIENT = BlobServiceClient.from_connection_string(AZURE_CONNECTION_STRING)
AZURE_CONTAINER_CLIENT = SERVICE_CLIENT.get_container_client(AZURE_CONTAINER_NAME)

# Hosts
UI_HOST = config("UI_HOST")
# SUPPORT_UI_HOST = config("SUPPORT_UI_HOST")
SERVER_HOST = config("SERVER_HOST")

# Static and Media configurations
STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(BASE_DIR, "static/")

MEDIA_PATH = "media/"
MEDIA_URL = "/media_job_board/"
MEDIA_ROOT = os.path.join(BASE_DIR, MEDIA_PATH)

RESUME_PARSER_ML_HOST = config("RESUME_PARSER_ML_HOST")
